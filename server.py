"""Hosts the live video footage from the Raspberry Pi to a web interface.

Provides an index page and a '/video_feed' endpoint that streams MJPEG
frames generated by `capture.get_frame()`. Also broadcasts UDP discovery
packets so mobile apps can automatically find the camera.
"""
from flask import Flask, Response
import time
import capture
import socket
import json
import threading
import logging

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

def gen(generator):
    """Generate MJPEG frames with proper error handling."""
    try:
        for frame in generator:
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
    except GeneratorExit:
        logging.info("Client disconnected from stream")
    except Exception as e:
        logging.error(f"Error in frame generator: {e}")


def mjpeg_stream(generator):
        return Response(gen(generator), mimetype='multipart/x-mixed-replace; boundary=frame')


@app.route('/video_feed')
def video_feed():
	"""Stream MJPEG video feed. Each connection gets a fresh camera instance."""
	try:
		return mjpeg_stream(capture.get_frame())
	except Exception as e:
		logging.error(f"Error starting video feed: {e}")
		return Response(f"Error: {str(e)}", status=500)


def get_local_ip():
    """Get the local IP address of this machine."""
    try:
        # Create a socket to determine the local IP
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except Exception:
        return "127.0.0.1"


def udp_broadcast_worker(camera_name, server_port, broadcast_port=12345, interval=2, emulator_mode=False, emulator_ip=None):
    """Broadcast UDP discovery packets so apps can find this camera.
    
    Args:
        camera_name: Display name for the camera
        server_port: HTTP port where the camera server is running
        broadcast_port: UDP port to broadcast on (default 12345)
        interval: Seconds between broadcasts (default 2)
        emulator_mode: If True, send directly to emulator_ip instead of broadcast
        emulator_ip: IP address of the PC running the Android emulator
    """
    local_ip = get_local_ip()
    
    message = json.dumps({
        "type": "security_camera",
        "name": camera_name,
        "ip": local_ip,
        "port": server_port
    })
    
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    if emulator_mode and emulator_ip:
        logging.info(f"Emulator mode: Sending UDP packets directly to {emulator_ip}:{broadcast_port}")
        logging.info(f"Your emulator will receive this at 10.0.2.2 (mapped from {emulator_ip})")
        target = (emulator_ip, broadcast_port)
    else:
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        logging.info(f"Starting UDP broadcast on port {broadcast_port}")
        target = ('<broadcast>', broadcast_port)
    
    logging.info(f"Sending: {message}")
    
    try:
        while True:
            sock.sendto(message.encode('utf-8'), target)
            time.sleep(interval)
    except Exception as e:
        logging.error(f"UDP broadcast error: {e}")
    finally:
        sock.close()


def run(host='0.0.0.0', port=5000, camera_name="Raspberry Pi Camera", enable_discovery=True, emulator_mode=False, emulator_ip=None):
    """Start the Flask server and optionally the UDP discovery broadcast.
    
    Args:
        host: Host to bind the server to (default '0.0.0.0')
        port: HTTP port for the server (default 5000)
        camera_name: Display name for UDP discovery (default "Raspberry Pi Camera")
        enable_discovery: Whether to enable UDP discovery broadcast (default True)
        emulator_mode: If True, send UDP directly to emulator_ip instead of broadcast
        emulator_ip: IP address of the PC running the Android emulator (e.g., "192.168.1.100")
    """
    if enable_discovery:
        # Start UDP broadcast in a daemon thread
        broadcast_thread = threading.Thread(
            target=udp_broadcast_worker,
            args=(camera_name, port),
            kwargs={'emulator_mode': emulator_mode, 'emulator_ip': emulator_ip},
            daemon=True
        )
        broadcast_thread.start()
        
        if emulator_mode and emulator_ip:
            logging.info(f"Camera '{camera_name}' is discoverable by Android emulator at {emulator_ip}")
        else:
            logging.info(f"Camera '{camera_name}' is discoverable via UDP on port 12345")
    
    logging.info(f"Starting Flask server on {host}:{port}")
    app.run(host=host, port=port, threaded=True)